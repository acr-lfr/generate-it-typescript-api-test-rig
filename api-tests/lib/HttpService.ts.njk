import request from 'request-promise';
import urlJoin from 'url-join';

import config from '../config';
import { RequestObject } from '../nodegen/interfaces/RequestObject';


export default class HttpService {
  /**
   * Injects the values into a path
   * @param {Object} params
   * @param {String} path
   */
  private static injectParamsToPath (params: any = {}, path: string) {
    Object.keys(params).forEach((param) => {
      path = path.replace(':' + param, params[param]);
    });
    return path;
  }

  /**
   * Make the http requestPromise
   * @param {RequestObject} requestObject
   */
  public async sendRequest (requestObject: RequestObject): Promise<any> {
    return new Promise((resolve, reject) => {
      requestObject.headers = Object.assign(requestObject.headers || {}, {
        Connection: 'keep-alive',
      });
      const URL = urlJoin(
              config.baseUrl,
              HttpService.injectParamsToPath(
                      requestObject.params,
                      requestObject.path,
              ),
      );
      let requestPromiseObject;
      if (requestObject.formData) {
        requestPromiseObject = {
          headers: requestObject.headers,
          method: requestObject.method,
          gzip: true,
          formData: requestObject.formData,
          resolveWithFullResponse: true,
          url: URL,
          json: true,
        };
      } else {
        requestPromiseObject = {
          body: requestObject.body,
          headers: requestObject.headers,
          json: true,
          method: requestObject.method,
          qs: requestObject.qs,
          gzip: true,
          resolveWithFullResponse: true,
          url: URL,
        };
      }
      request(requestPromiseObject)
        .then(resolve)
        .catch(reject);
    });
  }
}
